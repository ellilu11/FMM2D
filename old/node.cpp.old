#include <iostream>
#include <fstream>
#include <vector>
#include <complex>
// #include <iterator>
#include <cmath>

#include "node.h"
#include "mathfunc.h"
#include "fstream.h"

using namespace std;

node2D::node2D(std::vector<std::complex<double> > Z, int maxparts, 
    std::vector<int> iz, int lvl, double size, std::complex<double> center){

    this->iz = iz; 
    this->lvl = lvl; 
    this->size = size;
    this->center = center;
    
    int nparts = iz.size();
    if ( nparts > maxparts ){ // more particles than allowed in this box; continue to subdivide

        isLeaf = 0;
        std::vector<int> iz1, iz2, iz3, iz4;
        // std::iterator<int> it1, it2, it3, it4;
        // it1 = iz1.begin(); it2 = iz2.begin(); it3 = iz3.begin(); it4 = iz4.begin();

        for ( int i=0; i<iz.size(); i++ ){
            if ((real(Z[iz[i]]) <= real(center)) && (imag(Z[iz[i]]) <= imag(center))){
                iz1.push_back(iz[i]);
                // iz1.insert(iz1.end(),iz[i]);
            } else if (real(Z[iz[i]]) > real(center) && imag(Z[iz[i]]) <= imag(center)){
                iz2.push_back(iz[i]);
                // iz2.insert(iz2.end(),iz[i]);
            } else if (real(Z[iz[i]]) <= real(center) && imag(Z[iz[i]]) > imag(center)){
                iz3.push_back(iz[i]);
                // iz3.insert(iz3.end(),iz[i]);
            } else if (real(Z[iz[i]]) > real(center) && imag(Z[iz[i]]) > imag(center)){
                iz4.push_back(iz[i]);
                // iz4.insert(iz4.end(),iz[i]);
            } 
        }

        double centerXleft = real(center)-size/4;
        double centerXright = real(center)+size/4;
        double centerYdown = imag(center)-size/4;
        double centerYup = imag(center)+size/4;

        branch1 = new node2D( Z, maxparts, iz1, lvl+1, size/2, centerXleft+I*centerYdown ); 
        branch2 = new node2D( Z, maxparts, iz2, lvl+1, size/2, centerXright+I*centerYdown ); 
        branch3 = new node2D( Z, maxparts, iz3, lvl+1, size/2, centerXleft+I*centerYup ); 
        branch4 = new node2D( Z, maxparts, iz4, lvl+1, size/2, centerXright+I*centerYup ); 
        branch1->parent = this;
        branch2->parent = this;
        branch3->parent = this;
        branch4->parent = this;

        // ~iz();
    } else {
        isLeaf = 1;   
        branch1 = NULL;
        branch2 = NULL;
        branch3 = NULL;
        branch4 = NULL;
    }

}

// counts the number of subnodes of a node (including self);
int node2D::numNodes(){
    if ( isLeaf ) return 1;
    else return 1 + branch1->numNodes() + branch2->numNodes() +
           branch3->numNodes() + branch4->numNodes();
}

// assigns inodes for a node and all its subnodes
void node2D::assignINode(int i){
    
    this->inode = i;
    if (isLeaf) return;
    
    branch1->inode = i+1;
    branch2->inode = branch1->inode+branch1->numNodes();
    branch3->inode = branch2->inode+branch2->numNodes();
    branch4->inode = branch3->inode+branch3->numNodes();
    
    branch1->assignINode(branch1->inode);
    branch2->assignINode(branch2->inode);
    branch3->assignINode(branch3->inode);
    branch4->assignINode(branch4->inode);

}

// returns pointer to ith subnode of a given node
node2D* node2D::ithNode(int i){
    if (this->inode == i) 
        return this;
    else if (i < branch2->inode)
        return branch1->ithNode(i);
    else if (i < branch3->inode)
        return branch2->ithNode(i);
    else if (i < branch4->inode)
        return branch3->ithNode(i);
    else 
        return branch4->ithNode(i);
}

// for any node, finds the truncated multipole coefficients due to all charges within
std::vector<std::complex<double> > 
    node2D::coeffMpole(std::vector<std::complex<double> > Z, std::vector<double> Q, int p){

    std::vector<std::complex<double> > B(p+1);
 
    // pre-calculate binomial coefficients
    std::vector<std::vector<int> > binomCoeffs(p, std::vector<int>(p));
    for ( int l=1; l<=p; l++ )
        for ( int k=1; k<=l; k++ )
            binomCoeffs[l-1][k-1] = binomCoeff(l-1,k-1);

    if ( isLeaf ){ 
        std::vector<std::complex<double> > A(p+1);
        std::complex<double> z0 = center - parent->center;
        int nparts = iz.size();

        // compute expansion coefficients a_k about center z_0
        for ( int i=0; i<nparts; i++ ) {
            A[0] += Q[iz[i]];
            for ( int k=1; k<=p; k++ )
                A[k] -= Q[iz[i]]*pow(Z[iz[i]],k)/(double)k;
        }
        
        // compute shifted expansion coefficients b_k about origin
        B[0] = A[0];
        for ( int l=1; l<=p; l++ ){
            B[l] = -A[0]*pow(center,l)/(double)l;
            for ( int k=1; k<=l; k++ )
                B[l] += A[k]*pow(z0,l-k)*(double)binomCoeffs[l-1][k-1];
        }
    } else {
        std::vector<std::vector<std::complex<double> > > A(4);
        A[0] = branch1->coeffMpole(Z, Q, p);
        A[1] = branch2->coeffMpole(Z, Q, p);
        A[2] = branch3->coeffMpole(Z, Q, p);
        A[3] = branch4->coeffMpole(Z, Q, p);

        std::vector<std::complex<double> > z0(4);
        z0[0] = branch1->center - center;
        z0[1] = branch2->center - center;
        z0[2] = branch3->center - center;
        z0[3] = branch4->center - center;

        for ( int j=0; j<3; j++ ){
            B[0] += A[j][0];
            for ( int l = 1; l<=p; l++ ){
                B[l] += -A[j][0]*pow(z0[j],l)/(double)l;
                for ( int k=1; k<=l; k++ )
                    B[l] += A[j][k]*pow(z0[j],l-k)*(double)binomCoeffs[l-1][k-1];
            }
        }
    }
    return B;
}

/* For any node, returns array of the truncated multipole coefficients for ALL subnodes including self.
   The nodes are ordered in the order of their access (same as iNode) */
std::vector<std::vector<std::complex<double> > >
    node2D::coeffMpoleAll(std::vector<std::complex<double> > Z, std::vector<double> Q, int p){

    int nnodes = numNodes();
    std::vector<std::vector<std::complex<double> > > Bs(nnodes);

    for (int i=0; i<nnodes; i++ )
        Bs[i] = ithNode(i)->coeffMpole(Z, Q, p);

    return Bs; 

}

std::vector<std::complex<double> > node2D::centerAll(){

    int nnodes = numNodes();
    std::vector<std::complex<double> > center(nnodes);

    for (int i=0; i<nnodes; i++ )
        center[i] = ithNode(i)->center;

    return center;
}

int node2D::isNeighbour(node2D* otherNode){
    double dist = abs(center - otherNode->center);
    return (lvl == otherNode->lvl && dist <= size*sqrt(2));
}

// For any node, returns array of indices of all nodes in that node's interaction list
/*std::vector<int> node2D::itrctnList(node2D* masterNode){
    this->parent-
            

}*/

// For any node, finds the coefficients of the local expansion due to all particles in that node's interaction list
/*std::vector<std::complex<double> > node2D::coeffLocalExpand(
    std::vector<std::vector<std::complex<double> > > Bs, std::vector<std::complex<double> >, int p){
    
    std::vector<int> iList = this->itrctnList();
    std::vector<std::complex<double> >  B(p+1);
    std::complex<double> z0;
    
    for ( int j=0; j<iList.size(); j++){
        z0 = center[iList[j]] - center;
        B[0] = Bs[iList[j]][0]*log(-z0);
        for ( int k=1; k<=p; k++)
            B[0] += Bs[iList[j]][k]*pow(-1,k)/pow(z0,k);
        for ( int l=1; l<=p; l++){
            B[l] = -Bs[iList[j]][0]/(l*pow(z0,l));
            for ( int k=1; k <=p; k++)
                B[l] += Bs[iList[j]][k]*pow(-1,k)/pow(z0,k)*binomCoeffs[l+k-1][k-1];
        }
    } 

    return B;

}*/

void node2D::fprintZ(std::vector<std::complex<double> > Z){
    if (this != NULL) {
        // cout << "NEW NODE w/ " << iz.size() << " particles centered at " << center << endl;

        ::npartsFile << iz.size() << endl;
        for ( int i=0; i<iz.size(); i++ ){
            ::ZFile.write((char*)&real(Z[iz[i]]), sizeof(double));
            ::ZFile.write((char*)&imag(Z[iz[i]]), sizeof(double));
            // ::ZFile << real(Z[iz[i]]) << "," << imag(Z[iz[i]]) << endl;
        }

        branch1->fprintZ(Z);
        branch2->fprintZ(Z);
        branch3->fprintZ(Z);
        branch4->fprintZ(Z);
    }
}

